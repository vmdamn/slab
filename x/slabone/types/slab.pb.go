// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: slabone/slabone/slab.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Slab struct {
	Id                  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DirectedTowards     string `protobuf:"bytes,2,opt,name=directedTowards,proto3" json:"directedTowards,omitempty"`
	Assertion           string `protobuf:"bytes,3,opt,name=assertion,proto3" json:"assertion,omitempty"`
	UriOriginator       string `protobuf:"bytes,4,opt,name=uriOriginator,proto3" json:"uriOriginator,omitempty"`
	State               string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	OriginatorSocialId  string `protobuf:"bytes,6,opt,name=originatorSocialId,proto3" json:"originatorSocialId,omitempty"`
	OriginatorChainAddr string `protobuf:"bytes,7,opt,name=originatorChainAddr,proto3" json:"originatorChainAddr,omitempty"`
	OriginatedCtxHeight string `protobuf:"bytes,8,opt,name=originatedCtxHeight,proto3" json:"originatedCtxHeight,omitempty"`
	OriginatedCtxTime   string `protobuf:"bytes,9,opt,name=originatedCtxTime,proto3" json:"originatedCtxTime,omitempty"`
	VetterSocialId      string `protobuf:"bytes,10,opt,name=vetterSocialId,proto3" json:"vetterSocialId,omitempty"`
	VetterChainAddr     string `protobuf:"bytes,11,opt,name=vetterChainAddr,proto3" json:"vetterChainAddr,omitempty"`
	VettingCtxHeight    string `protobuf:"bytes,12,opt,name=vettingCtxHeight,proto3" json:"vettingCtxHeight,omitempty"`
	VettingCtxTime      string `protobuf:"bytes,13,opt,name=vettingCtxTime,proto3" json:"vettingCtxTime,omitempty"`
	VettingNote         string `protobuf:"bytes,14,opt,name=vettingNote,proto3" json:"vettingNote,omitempty"`
	UriVetter           string `protobuf:"bytes,15,opt,name=uriVetter,proto3" json:"uriVetter,omitempty"`
	RevokerSocialId     string `protobuf:"bytes,16,opt,name=revokerSocialId,proto3" json:"revokerSocialId,omitempty"`
	RevokerChainAddr    string `protobuf:"bytes,17,opt,name=revokerChainAddr,proto3" json:"revokerChainAddr,omitempty"`
	RevokingCtxHeight   string `protobuf:"bytes,18,opt,name=revokingCtxHeight,proto3" json:"revokingCtxHeight,omitempty"`
	RevokingCtxTime     string `protobuf:"bytes,19,opt,name=revokingCtxTime,proto3" json:"revokingCtxTime,omitempty"`
	RevokingNote        string `protobuf:"bytes,20,opt,name=revokingNote,proto3" json:"revokingNote,omitempty"`
	UriRevoker          string `protobuf:"bytes,21,opt,name=uriRevoker,proto3" json:"uriRevoker,omitempty"`
}

func (m *Slab) Reset()         { *m = Slab{} }
func (m *Slab) String() string { return proto.CompactTextString(m) }
func (*Slab) ProtoMessage()    {}
func (*Slab) Descriptor() ([]byte, []int) {
	return fileDescriptor_19016bac0025a6de, []int{0}
}
func (m *Slab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Slab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Slab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Slab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slab.Merge(m, src)
}
func (m *Slab) XXX_Size() int {
	return m.Size()
}
func (m *Slab) XXX_DiscardUnknown() {
	xxx_messageInfo_Slab.DiscardUnknown(m)
}

var xxx_messageInfo_Slab proto.InternalMessageInfo

func (m *Slab) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Slab) GetDirectedTowards() string {
	if m != nil {
		return m.DirectedTowards
	}
	return ""
}

func (m *Slab) GetAssertion() string {
	if m != nil {
		return m.Assertion
	}
	return ""
}

func (m *Slab) GetUriOriginator() string {
	if m != nil {
		return m.UriOriginator
	}
	return ""
}

func (m *Slab) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Slab) GetOriginatorSocialId() string {
	if m != nil {
		return m.OriginatorSocialId
	}
	return ""
}

func (m *Slab) GetOriginatorChainAddr() string {
	if m != nil {
		return m.OriginatorChainAddr
	}
	return ""
}

func (m *Slab) GetOriginatedCtxHeight() string {
	if m != nil {
		return m.OriginatedCtxHeight
	}
	return ""
}

func (m *Slab) GetOriginatedCtxTime() string {
	if m != nil {
		return m.OriginatedCtxTime
	}
	return ""
}

func (m *Slab) GetVetterSocialId() string {
	if m != nil {
		return m.VetterSocialId
	}
	return ""
}

func (m *Slab) GetVetterChainAddr() string {
	if m != nil {
		return m.VetterChainAddr
	}
	return ""
}

func (m *Slab) GetVettingCtxHeight() string {
	if m != nil {
		return m.VettingCtxHeight
	}
	return ""
}

func (m *Slab) GetVettingCtxTime() string {
	if m != nil {
		return m.VettingCtxTime
	}
	return ""
}

func (m *Slab) GetVettingNote() string {
	if m != nil {
		return m.VettingNote
	}
	return ""
}

func (m *Slab) GetUriVetter() string {
	if m != nil {
		return m.UriVetter
	}
	return ""
}

func (m *Slab) GetRevokerSocialId() string {
	if m != nil {
		return m.RevokerSocialId
	}
	return ""
}

func (m *Slab) GetRevokerChainAddr() string {
	if m != nil {
		return m.RevokerChainAddr
	}
	return ""
}

func (m *Slab) GetRevokingCtxHeight() string {
	if m != nil {
		return m.RevokingCtxHeight
	}
	return ""
}

func (m *Slab) GetRevokingCtxTime() string {
	if m != nil {
		return m.RevokingCtxTime
	}
	return ""
}

func (m *Slab) GetRevokingNote() string {
	if m != nil {
		return m.RevokingNote
	}
	return ""
}

func (m *Slab) GetUriRevoker() string {
	if m != nil {
		return m.UriRevoker
	}
	return ""
}

func init() {
	proto.RegisterType((*Slab)(nil), "slabone.slabone.Slab")
}

func init() { proto.RegisterFile("slabone/slabone/slab.proto", fileDescriptor_19016bac0025a6de) }

var fileDescriptor_19016bac0025a6de = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0xee, 0x12, 0x31,
	0x10, 0xc7, 0x59, 0xe4, 0x87, 0x32, 0xfc, 0x2f, 0x18, 0x1b, 0x63, 0x36, 0x84, 0x18, 0x43, 0x8c,
	0x41, 0x8d, 0x4f, 0xa0, 0x5c, 0xf4, 0xa2, 0x09, 0x10, 0x0f, 0xde, 0x0a, 0x6d, 0xa0, 0x11, 0xb7,
	0xa4, 0x5b, 0x10, 0xdf, 0xc2, 0x87, 0xf1, 0x21, 0x3c, 0x72, 0xf4, 0x68, 0xe0, 0x45, 0x7e, 0xd9,
	0xe9, 0xb2, 0xed, 0x2e, 0x9c, 0x36, 0xfb, 0x99, 0x6f, 0xd3, 0xcf, 0x4c, 0x33, 0xf0, 0x34, 0xde,
	0xb0, 0x85, 0x8a, 0xc4, 0x6b, 0xff, 0x3b, 0xde, 0x6a, 0x65, 0x14, 0x69, 0xa7, 0x6c, 0x9c, 0x7e,
	0x87, 0x7f, 0xaa, 0x50, 0x99, 0x6d, 0xd8, 0x82, 0xb4, 0xa0, 0x2c, 0x39, 0x0d, 0x06, 0xc1, 0xa8,
	0x32, 0x2d, 0x4b, 0x4e, 0x46, 0xd0, 0xe6, 0x52, 0x8b, 0xa5, 0x11, 0x7c, 0xae, 0x7e, 0x32, 0xcd,
	0x63, 0x5a, 0x1e, 0x04, 0xa3, 0xda, 0xb4, 0x88, 0xc9, 0x33, 0xa8, 0xb1, 0x38, 0x16, 0xda, 0x48,
	0x15, 0xd1, 0x07, 0x98, 0x71, 0x80, 0x3c, 0x87, 0xe6, 0x4e, 0xcb, 0x2f, 0x5a, 0xae, 0x64, 0xc4,
	0x8c, 0xd2, 0xb4, 0x82, 0x89, 0x3c, 0x24, 0x7d, 0xb8, 0x8b, 0x0d, 0x33, 0x82, 0xde, 0x61, 0xd5,
	0xfe, 0x90, 0x31, 0x10, 0x95, 0x65, 0x66, 0x6a, 0x29, 0xd9, 0xe6, 0x13, 0xa7, 0x55, 0x8c, 0xdc,
	0xa8, 0x90, 0x37, 0xd0, 0x73, 0x74, 0xb2, 0x66, 0x32, 0x7a, 0xcf, 0xb9, 0xa6, 0x0f, 0xf1, 0xc0,
	0xad, 0x92, 0x7f, 0x42, 0xf0, 0x89, 0x39, 0x7c, 0x14, 0x72, 0xb5, 0x36, 0xf4, 0x51, 0xfe, 0x84,
	0x57, 0x22, 0xaf, 0xa0, 0x9b, 0xc3, 0x73, 0xf9, 0x43, 0xd0, 0x1a, 0xe6, 0xaf, 0x0b, 0xe4, 0x05,
	0xb4, 0xf6, 0xc2, 0x18, 0xe1, 0xec, 0x01, 0xa3, 0x05, 0x9a, 0x4c, 0xdb, 0x12, 0x67, 0x5d, 0xb7,
	0xd3, 0x2e, 0x60, 0xf2, 0x12, 0x3a, 0x09, 0x92, 0xd1, 0xca, 0xe9, 0x36, 0x30, 0x7a, 0xc5, 0x2f,
	0xb7, 0x5b, 0x86, 0xa2, 0x4d, 0x77, 0xbb, 0xa3, 0x64, 0x00, 0xf5, 0x94, 0x7c, 0x56, 0x46, 0xd0,
	0x16, 0x86, 0x7c, 0x94, 0xbc, 0xf1, 0x4e, 0xcb, 0xaf, 0xe8, 0x42, 0xdb, 0xf6, 0x8d, 0x33, 0x90,
	0xd8, 0x6b, 0xb1, 0x57, 0xdf, 0xbd, 0x36, 0x3b, 0xd6, 0xbe, 0x80, 0x13, 0xfb, 0x14, 0xb9, 0x46,
	0xbb, 0xd6, 0xbe, 0xc8, 0x93, 0x49, 0x23, 0xcb, 0xb5, 0x4a, 0xec, 0xa4, 0xaf, 0x0a, 0x99, 0x83,
	0xd7, 0x6c, 0xcf, 0x73, 0xf0, 0xba, 0x1d, 0x42, 0xe3, 0x82, 0xb0, 0xdd, 0x3e, 0xc6, 0x72, 0x8c,
	0x84, 0x00, 0x3b, 0x2d, 0xa7, 0x56, 0x89, 0x3e, 0xc6, 0x84, 0x47, 0x3e, 0xbc, 0xfd, 0x7b, 0x0a,
	0x83, 0xe3, 0x29, 0x0c, 0xfe, 0x9f, 0xc2, 0xe0, 0xf7, 0x39, 0x2c, 0x1d, 0xcf, 0x61, 0xe9, 0xdf,
	0x39, 0x2c, 0x7d, 0x7b, 0x72, 0xd9, 0xba, 0x43, 0xb6, 0x7f, 0xe6, 0xd7, 0x56, 0xc4, 0x8b, 0x2a,
	0x6e, 0xe0, 0xbb, 0xfb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xf3, 0x51, 0x03, 0x9f, 0x03, 0x00,
	0x00,
}

func (m *Slab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Slab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Slab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UriRevoker) > 0 {
		i -= len(m.UriRevoker)
		copy(dAtA[i:], m.UriRevoker)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.UriRevoker)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.RevokingNote) > 0 {
		i -= len(m.RevokingNote)
		copy(dAtA[i:], m.RevokingNote)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.RevokingNote)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.RevokingCtxTime) > 0 {
		i -= len(m.RevokingCtxTime)
		copy(dAtA[i:], m.RevokingCtxTime)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.RevokingCtxTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.RevokingCtxHeight) > 0 {
		i -= len(m.RevokingCtxHeight)
		copy(dAtA[i:], m.RevokingCtxHeight)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.RevokingCtxHeight)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.RevokerChainAddr) > 0 {
		i -= len(m.RevokerChainAddr)
		copy(dAtA[i:], m.RevokerChainAddr)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.RevokerChainAddr)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.RevokerSocialId) > 0 {
		i -= len(m.RevokerSocialId)
		copy(dAtA[i:], m.RevokerSocialId)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.RevokerSocialId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.UriVetter) > 0 {
		i -= len(m.UriVetter)
		copy(dAtA[i:], m.UriVetter)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.UriVetter)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.VettingNote) > 0 {
		i -= len(m.VettingNote)
		copy(dAtA[i:], m.VettingNote)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.VettingNote)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.VettingCtxTime) > 0 {
		i -= len(m.VettingCtxTime)
		copy(dAtA[i:], m.VettingCtxTime)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.VettingCtxTime)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.VettingCtxHeight) > 0 {
		i -= len(m.VettingCtxHeight)
		copy(dAtA[i:], m.VettingCtxHeight)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.VettingCtxHeight)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.VetterChainAddr) > 0 {
		i -= len(m.VetterChainAddr)
		copy(dAtA[i:], m.VetterChainAddr)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.VetterChainAddr)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.VetterSocialId) > 0 {
		i -= len(m.VetterSocialId)
		copy(dAtA[i:], m.VetterSocialId)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.VetterSocialId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.OriginatedCtxTime) > 0 {
		i -= len(m.OriginatedCtxTime)
		copy(dAtA[i:], m.OriginatedCtxTime)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.OriginatedCtxTime)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OriginatedCtxHeight) > 0 {
		i -= len(m.OriginatedCtxHeight)
		copy(dAtA[i:], m.OriginatedCtxHeight)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.OriginatedCtxHeight)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OriginatorChainAddr) > 0 {
		i -= len(m.OriginatorChainAddr)
		copy(dAtA[i:], m.OriginatorChainAddr)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.OriginatorChainAddr)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OriginatorSocialId) > 0 {
		i -= len(m.OriginatorSocialId)
		copy(dAtA[i:], m.OriginatorSocialId)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.OriginatorSocialId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UriOriginator) > 0 {
		i -= len(m.UriOriginator)
		copy(dAtA[i:], m.UriOriginator)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.UriOriginator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Assertion) > 0 {
		i -= len(m.Assertion)
		copy(dAtA[i:], m.Assertion)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.Assertion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DirectedTowards) > 0 {
		i -= len(m.DirectedTowards)
		copy(dAtA[i:], m.DirectedTowards)
		i = encodeVarintSlab(dAtA, i, uint64(len(m.DirectedTowards)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSlab(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSlab(dAtA []byte, offset int, v uint64) int {
	offset -= sovSlab(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Slab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSlab(uint64(m.Id))
	}
	l = len(m.DirectedTowards)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.Assertion)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.UriOriginator)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.OriginatorSocialId)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.OriginatorChainAddr)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.OriginatedCtxHeight)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.OriginatedCtxTime)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.VetterSocialId)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.VetterChainAddr)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.VettingCtxHeight)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.VettingCtxTime)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.VettingNote)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.UriVetter)
	if l > 0 {
		n += 1 + l + sovSlab(uint64(l))
	}
	l = len(m.RevokerSocialId)
	if l > 0 {
		n += 2 + l + sovSlab(uint64(l))
	}
	l = len(m.RevokerChainAddr)
	if l > 0 {
		n += 2 + l + sovSlab(uint64(l))
	}
	l = len(m.RevokingCtxHeight)
	if l > 0 {
		n += 2 + l + sovSlab(uint64(l))
	}
	l = len(m.RevokingCtxTime)
	if l > 0 {
		n += 2 + l + sovSlab(uint64(l))
	}
	l = len(m.RevokingNote)
	if l > 0 {
		n += 2 + l + sovSlab(uint64(l))
	}
	l = len(m.UriRevoker)
	if l > 0 {
		n += 2 + l + sovSlab(uint64(l))
	}
	return n
}

func sovSlab(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSlab(x uint64) (n int) {
	return sovSlab(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Slab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Slab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Slab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectedTowards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectedTowards = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assertion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assertion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriOriginator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UriOriginator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginatorSocialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginatorSocialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginatorChainAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginatorChainAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginatedCtxHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginatedCtxHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginatedCtxTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginatedCtxTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VetterSocialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VetterSocialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VetterChainAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VetterChainAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VettingCtxHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VettingCtxHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VettingCtxTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VettingCtxTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VettingNote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VettingNote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriVetter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UriVetter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokerSocialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokerSocialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokerChainAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokerChainAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokingCtxHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokingCtxHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokingCtxTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokingCtxTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokingNote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokingNote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriRevoker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UriRevoker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSlab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSlab(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSlab
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlab
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSlab
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSlab
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSlab
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSlab        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSlab          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSlab = fmt.Errorf("proto: unexpected end of group")
)
